---Exercise 1: Using Joins
---You have been asked to produce some reports about the communities and crimes in the Chicago area. You will need to use SQL join queries to access the data stored across multiple tables.

---Question 1
---Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.

SELECT ps.name_of_school, cs.community_area_name, ps.average_student_attendance 
from public_school ps 
left join census cs 
on upper(ps.community_area_name) = upper(cs.community_area_name) 
where cs.hardship_index = '98';

---Question 2
---Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.

select cr.case_number, cr.primary_type, cs.community_area_name
from crime cr
left join census cs on cr.community_area_number = cs.community_area_number
where (upper(cr.location_description) like '%SCHOOL%');

---Exercise 2: Creating a View
---For privacy reasons, you have been asked to create a view that enables users to select just the school name and the icon fields from the CHICAGO_PUBLIC_SCHOOLS table. By providing a view, you can ensure that users cannot see the actual scores given to a school, just the icon associated with their score. You should define new names for the view columns to obscure the use of scores and icons in the original table.

---Question 1
---Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.

create view schoolview as
select
NAME_OF_SCHOOL as	School_Name,
Safety_Icon	as Safety_Rating,
Family_Involvement_Icon as	Family_Rating,
Environment_Icon	as Environment_Rating,
Instruction_Icon	as Instruction_Rating,
Leaders_Icon	as Leaders_Rating,
Teachers_Icon	as Teachers_Rating
from public_school;

select * from schoolview;

---e2q1: Write and execute a SQL statement that returns just the school name and leadersâ€™ icon from the view.
select school_name, leaders_rating from schoolview;

---Exercise 3: Creating a Stored Procedure
---The icon fields are calculated based on the value in the corresponding score field. You need to make sure that when a score field is updated, the icon field is updated too. To do this, you will write a stored procedure that receives the school id and a leaders score as input parameters, calculates the icon setting and updates the fields appropriately.

---Question 1
---Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.
Take a screenshot showing the SQL query.


---Question 2
---Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.
Take a screenshot showing the SQL query.

---Question 3
---Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.
